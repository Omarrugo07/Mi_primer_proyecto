<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        QH0AAAAASUVORK5CYII=
</value>
  </data>
</root>